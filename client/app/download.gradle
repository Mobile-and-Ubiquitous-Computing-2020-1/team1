def targetFolder = "src/main/assets"
def modelDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/tflite_11_05_08/resnet_v2_101.tgz"
def localCache = "build/intermediates/resnet_v2_101.tgz"


task downloadModel(type: DownloadUrlTask) {
	doFirst {
		println "Downloading ${modelDownloadUrl}"
	}
	sourceUrl = "${modelDownloadUrl}"
	target = file("${localCache}")
}

task unzipModel(type: Copy, dependsOn: 'downloadModel') {
	doFirst {
		println "Unzipping ${localCache}"
	}
	from tarTree("${localCache}")
	into "${targetFolder}"
}

task cleanUnusedFiles(type: Delete, dependsOn: 'unzipModel') {
    delete fileTree("${targetFolder}").matching {
        include "*.pb"
        include "*.ckpt.*"
        include "*.pbtxt*"
        include "*.quant_info.*"
        include "*.meta"
    }
}

class DownloadUrlTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}

preBuild.dependsOn unzipModel
preBuild.dependsOn cleanUnusedFiles